// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  password      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  department    Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId  String?
  introduction  String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  exams     Exam[]  // User がアップロードした Exam のリスト

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Otp {
  id            String  @id @default(cuid())
  email         String?  @unique
  otp           String?
  expires_at    DateTime

  @@map("otps")
}

model Exam {
  id           String    @id @default(cuid())
  year         Int
  professor    String?
  fileUrl      String
  uploader     User      @relation(fields: [uploaderId], references: [id])
  uploaderId   String
  department   Department  @relation(fields: [departmentId], references: [id])
  departmentId String
  lecture      Lecture   @relation(fields: [lectureId], references: [id])
  lectureId    String
  tag          Tag       @relation(fields: [tagId], references: [id])
  tagId        String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("exams")
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
  exams Exam[]

  @@map("departments")
}

model Lecture {
  id     String @id @default(cuid())
  name   String @unique
  exams  Exam[]

  @@map("lectures")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  exams Exam[]
  
  @@map("tags")
}